{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9280\viewh11220\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qj\pardirnatural

\f0\fs24 \cf0 Project Proposal\
Ryan Spangler\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\fi720\qj\pardirnatural
\cf0 I propose a model of synchronization, based on the local interactions of homogenous agents.  The goal is to have synchronization spontaneously emerge from a set of agents, without orchestrating the operation from above.  Each agent will have as a basis a frequency with which it fires and will keep track of its affinity to other agents.  This affinity is modified based on how often the other agents in its proximity are firing at the same time.  The frequency is influenced by a number of things.  First, if the agent fires when nothing else is firing, its frequency goes down.  If other things are firing and it is not, its frequency goes up.  The influence the firings of other agents have on the agent in question is weighted by the affinity this agent has established in orientation to them.  Also, there are certain minimum and maximum firing rates, the maximum of which triggers exhaustion, at which point it must fire at the minimum for a time.  This exhaustion can be tracked with a variable particular to each agent that is expended in times of high frequency and replenished in times of low frequency.  The agents will move in order to be near those who they have a high affinity for and away from those with low or negative affinity.  \
There is another approach as well I would like to explore.  This one attempts to model "surprise", in that the agents maintain a synchrony, and when an event occurs in the "environment" it propagates itself through the system as a *disruption* of this synchrony, with the extent and nature of the disruption characterizing the kind of event.  This one would require a membrane/environment system that would send signals and receive signals from the main system.  I am picturing a basic brownian motion type particle based system, with collisions against the membrane triggering disturbances in the synchrony field.  I feel that if the synchrony from the first approach is designed well, it could be used as a basis for this disturbance based approach.  So this really builds on the previous idea.\
I am interested in this idea because I see the timing based approach as a potentially unexplored space in the modeling realm.  Most models are mapped against time of course, but usually in general contours or wide arcs, as in "this variable increases over time" or "population declines in the presence of X".  Less common are models which address time-based signals, where a signal could have significance if arriving before a certain event, but not after for example.  Using the ideas of frequency, phase and triggers I hope to address another axis of possible modeling material.  I take greatest inspiration from the brain and neural synchrony, which I have been working to understand, and it would be helpful to have a model where I can work with the parameters and organization of such a system at will.  The way that neurons behave is defined by their various spiking frequencies and the modulation of these frequencies by the influence of neurons which are connected to them.  All neurons fire at a particular base level frequency particular to that neuron or type of neuron when at rest, called the "resting frequency", and when active fire at a noticeably higher frequency.  This is in contrast to the usual simplifications people make when modeling neurons, which is to abstract out the frequency into a particular value, or even just an "on" and "off" state, and to have these values related through the connections between the simulated neurons.  I feel that this is giving up too much, and that the function of the neuron is intimately tied to timing based events.  For instance, in most simulations, neurodes (as is a common term for simulated neurons) base their decision to become active on how many neurodes in its "instar" (connections feeding into this neurode) are active.  However, in real neurons, signals coming in from other active neurons can have a dramatically different effect depending on what part of the firing cycle the receiving neuron is in.  Signals coming in when the neuron is hyperpolarized, for instance, can have little to no effect, while the same signals coming in at a time while the neuron is becoming depolarized can have a cascading positive feedback loop that triggers an action potential.  These dynamics, which constitute the bulk of neural interactions, are totally lost when timing/frequency based information about the interactions is ignored.  In particular, one of the main features of true neural networks is that they exhibit synchronization of frequency between clusters of interconnected areas.  This is not just firing at the same frequency, but also firing *in phase* with one another, meaning that each spike occurs at the same time as every other spike.  As a basis of research grows, this acclimation to synchronize is becoming related more and more to the basic substrate of thought, and though the mechanism is not entirely known, connections have been made between neural synchronization and the phenomenon of consciousness.\
My main purpose is to arrive at some basic building blocks of synchronous activity, and to be able to define clearly what kinds of elements are necessary to enable a system to exhibit synchronous behavior, despite responding to only local phenomena.  If I am able to replicate some of the basic properties of synchronous networks, this may shed some light on the purpose and mechanism of synchronicity between neurons.  There are many possibilities, and I plan on attempting a variety of approaches, as I'm sure this will be necessary before I am satisfied with the behavior as being truly synchronous, in the sense I am describing here.\
As a simplification, I will not be attempting to model neurons directly.  Instead, I will try to abstract out the pertinent behaviors that support synchronicity.  In particular, there will be no spatial constraints to the nodes, they will be able to travel anywhere.  And there will be no linkage constraints, they will interact with all other nodes in a certain radius.  Usually neurons are stationary, and do not forge new links with other neurons, but modulate the links they already have.  So these will not really be like neurons at all, except they possess a firing frequency that is modulated by their interactions with other nodes.  \
As for a process for building this model, I want to get something up and running right away, even if it is extremely simplified, and flesh out the details through a continuous process of feedback and interaction.   Building, then reflecting to inform the next round of building.  I feel that many of the details cannot be known until I have something to work with, and see how everything is behaving.  I look forward to exploring this space.\
To see what the model is doing beyond watching the synchronous flashing of the various agents, I am picturing a series of graphs that capture the degree to which the various approaches induce synchrony, showing various frequency bands and percentages of surrounding synchronous fire.  Another cross-sectioned with duration of synchronous events perhaps.  \
I feel like trivial synchrony is easy to achieve, just time all the flashes to a specific frequency and phase.  They don't even need to interact!  What will tell me how well I have done is if the means I use to inspire synchrony is based on only local interactions, what information the agents require in order to synchronize, and how flexible the synchronization is in the face of various perturbations.  }